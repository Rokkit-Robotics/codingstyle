Поговорим о coding style:)

Коллеги, никаких суровых ограничений на стиль вашего кода никто накладывать не собирается, просто есть некоторые требования которым неплохо следовать. Это во-первых улучшает читаемость кода, и, согласитесь, когда код всей команды оформлен в одном стиле это прекрасно.

За основу взят стиль K&R и Kernel Coding Style
Итак:


Часть 0.
Длина строки

По-хорошему, длина строки не должна превышать 80 символов, но в них не всегда можно уместить все что хочется, так что это будем считать мягким ограничением. Жесткое ограничение 120 символов.
И оно реально жесткое. Будем проверять ваш код скриптами.


Часть 1.
Отступы и пробелы

-Отступ должен составлять 4 пробела. Ни больше, ни меньше. Это жестко закреплено. В ваших редакторах обычно есть функции превращающие \t в нужное вам число пробелов

-Не ставьте пробелы перед/после унарных операторов
Правильно:
i++;
Не надо так делать:
i ++;
a += - i;

-Ставьте пробелы вокруг бинарных и тернарных операторов
Правильно:
a = b + i;
a = b ? i : c;
Не надо так делать:
a=b*i+c;

-Не ставьте пробелы перед запятой и точкой с запятой
i = b + i;

Часть 2.
Перенос строк

Каждое выражение, желательно, должно быть на новой строке. Но если очень хочется и тут это логично, то можно оставить и на одной. Но усердствовать не надо.


Часть 3.
Расставление фигурных скобок

-При объявлении функций скобка на новой строке:
int myfoo(int a)
{
	...
}
-При условных конструкциях и циклах на той же после пробела:
for (int i = 0; i < 10; i++) {
	....
	....
}

if (a) {
	...
	...
}

-Можно и без фигурных скобок, если только одна не управляющая конструкция. Главное чтобы на новой строке и с отступом!
if (a)
	a += 10;

while (a < 10)
	a += 2;

Так делать не надо:
while (a)
	if (a) ...

-В блоке if - else
if (a) {

} else {
	...
}

-Если в if есть фигурные скобки, то они должны быть и в else (обратное тоже верно)
Так делать не надо:
if (a) {
	...
} else
	return 1;


-При объявлении классов и пространств имен фигурная скобка идет через пробел на той же строке
class MyClass {

};


Часть 4.
Правила оформления управляющих конструкций

-условие должно идти после скобки без пробела
if (expr) {

}

Так не надо:
if ( expr ) {

}
-После if, for, while перед скобкой должен быть пробел:
if (a)
for (int i = 0; i < 10; i++)

Так делать не надо:
if(a)
while(a)


-оформление лесенки if-else-if
if (a) {

} else if (b) {

} else if (c) {

} else {

}

-В случае, если у вас сложная логическая конструкция в условии и она труднопонимаема и/или не умещается в одной строке, то следует части логичеcкой конструкции разбить на части по операциям логического И/ИЛИ и писать каждый из них на новой строке выравнивая отступ так чтобы начало нового выражения было од старым.
То есть:
if (a == TEST_M_ABC(b)
  	|| b == TEST_M_ABC(a)
  	&& c != a) {

}
Часть 5.
NULL, nullptr и 0

-В СИ нулевой указатель обзначен как NULL
-В С++ - как nullptr

-В С++ bool переменные должны инициализирвоаться true и false

Сравнение на ноль/не ноль, true/false желательно проводить без опреторов сравнения
То есть:
char *ptr, *ptr2;
if (ptr) {
	...
}

if (!ptr2) {

}

Так не надо:
har *ptr, *ptr2;
if (ptr != NULL) {
	...
}

if (ptr2 == NULL) {

}



Часть 6.
Комментирование

Комментирование стандартное C99, то есть возможны и однострочные и многострочные комментарии.

Многострочные комменты выравнивать и  каждая новая строка начинается со звездочки и пробела
Писать можно со второй строки до предпоследней включительно
То есть:
/*
 * Это код для Никифорова
 * Написан Смирновой Натальей
 */

-Общие идеи когда и что нужно комментить.
-Комментировать нужно каждую функцию, хотя бы одну - две строки. (Это жестко) Для комментирования нужно использовать многострочные комменарии.
То есть:

/*
 * Функция демонстрирующая ....
 * i - ...
 */
int myFunc(int i)
{

}

если не лень, то можете сразу в стиле Doxygen.

-Обязательно документировать глобальные переменные. В комментариях обязательно писать в каких функциях используется

-Докумментировать желательно и сам код. В среднем на 7 строк кода - один коммент